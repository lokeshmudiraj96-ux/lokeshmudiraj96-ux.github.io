# QuickBite Platform - Complete CI/CD Pipeline
# Multi-stage deployment with testing, security scanning, and monitoring

name: QuickBite Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'
  KUBECTL_VERSION: 'v1.28.0'
  HELM_VERSION: 'v3.13.0'

jobs:
  # ============================================
  # CODE QUALITY & TESTING
  # ============================================
  
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install Dependencies
      run: |
        npm ci --workspaces --if-present
        cd quickbite-backend && npm ci
    
    - name: Run ESLint
      run: |
        npm run lint --workspaces --if-present
        cd quickbite-backend && npm run lint
    
    - name: Run Prettier
      run: |
        npm run format:check --workspaces --if-present
        cd quickbite-backend && npm run format:check
    
    - name: TypeScript Check
      run: |
        npm run type-check --workspaces --if-present
        cd quickbite-backend && npm run type-check
    
    - name: Run Tests
      run: |
        npm run test:coverage --workspaces --if-present
        cd quickbite-backend && npm run test:coverage
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ============================================
  # SECURITY SCANNING
  # ============================================
  
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Dependencies
      run: |
        npm ci --workspaces --if-present
        cd quickbite-backend && npm ci
    
    - name: Run npm audit
      run: |
        npm audit --audit-level moderate
        cd quickbite-backend && npm audit --audit-level moderate
    
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'QuickBite Platform'
        path: '.'
        format: 'XML'
        args: >
          --enableRetired
          --enableExperimental
          --suppression dependency-check-suppressions.xml
    
    - name: Upload OWASP Report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  # ============================================
  # BUILD & CONTAINERIZATION
  # ============================================
  
  build-services:
    name: Build & Push Container Images
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [code-quality, security-scan]
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        service: [
          'api-gateway',
          'auth-service',
          'catalog-service',
          'order-service',
          'payment-service',
          'delivery-service',
          'notification-service',
          'frontend'
        ]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./quickbite-backend/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          BUILD_DATE=${{ steps.meta.outputs.created }}
          VCS_REF=${{ github.sha }}
    
    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
    
    - name: Upload Trivy Results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # ============================================
  # MOBILE APP BUILD
  # ============================================
  
  build-mobile:
    name: Build Mobile Applications
    runs-on: macos-latest
    timeout-minutes: 60
    needs: code-quality
    
    strategy:
      matrix:
        app: ['customer-app', 'delivery-partner-app']
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup React Native
      uses: ./.github/actions/setup-react-native
    
    - name: Install Dependencies
      run: |
        cd quickbite-mobile/${{ matrix.app }}
        npm ci
        cd ios && pod install && cd ..
    
    - name: Run Tests
      run: |
        cd quickbite-mobile/${{ matrix.app }}
        npm test -- --coverage --watchAll=false
    
    - name: Build Android
      run: |
        cd quickbite-mobile/${{ matrix.app }}/android
        ./gradlew assembleRelease
    
    - name: Build iOS
      run: |
        cd quickbite-mobile/${{ matrix.app }}/ios
        xcodebuild -workspace QuickBite.xcworkspace \
                  -scheme QuickBite \
                  -configuration Release \
                  -destination generic/platform=iOS \
                  -archivePath QuickBite.xcarchive \
                  archive
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mobile-builds-${{ matrix.app }}
        path: |
          quickbite-mobile/${{ matrix.app }}/android/app/build/outputs/apk/release/
          quickbite-mobile/${{ matrix.app }}/ios/QuickBite.xcarchive

  # ============================================
  # INFRASTRUCTURE DEPLOYMENT
  # ============================================
  
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-services]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deployment_target
    environment: ${{ github.event.inputs.deployment_target || 'staging' }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Terraform Format Check
      run: |
        cd infra/terraform
        terraform fmt -check
    
    - name: Terraform Init
      run: |
        cd infra/terraform
        terraform init
    
    - name: Terraform Validate
      run: |
        cd infra/terraform
        terraform validate
    
    - name: Terraform Plan
      run: |
        cd infra/terraform
        terraform plan -var="environment=${{ github.event.inputs.deployment_target || 'staging' }}" -out=tfplan
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        cd infra/terraform
        terraform apply -auto-approve tfplan
    
    - name: Save Terraform Outputs
      run: |
        cd infra/terraform
        terraform output -json > terraform-outputs.json
    
    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs
        path: infra/terraform/terraform-outputs.json

  # ============================================
  # KUBERNETES DEPLOYMENT
  # ============================================
  
  deploy-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [deploy-infrastructure]
    environment: ${{ github.event.inputs.deployment_target || 'staging' }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Download Terraform Outputs
      uses: actions/download-artifact@v3
      with:
        name: terraform-outputs
        path: ./
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
    
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Update kubeconfig
      run: |
        CLUSTER_NAME=$(cat terraform-outputs.json | jq -r '.cluster_name.value')
        aws eks update-kubeconfig --region us-east-1 --name $CLUSTER_NAME
    
    - name: Deploy Kubernetes Manifests
      run: |
        # Update image tags in manifests
        sed -i "s|:latest|:${{ github.sha }}|g" infra/kubernetes/quickbite-k8s.yml
        
        # Apply manifests
        kubectl apply -f infra/kubernetes/quickbite-k8s.yml
        
        # Wait for deployment rollout
        kubectl rollout status deployment/api-gateway -n quickbite --timeout=600s
        kubectl rollout status deployment/auth-service -n quickbite --timeout=600s
    
    - name: Install Monitoring Stack
      run: |
        # Add Prometheus Helm repo
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
        
        # Install Prometheus
        helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
          --namespace monitoring --create-namespace \
          --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false
        
        # Install Ingress Controller
        helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
          --namespace ingress-nginx --create-namespace \
          --set controller.service.type=LoadBalancer

  # ============================================
  # DEPLOYMENT VERIFICATION
  # ============================================
  
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [deploy-kubernetes]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Update kubeconfig
      run: |
        CLUSTER_NAME=$(cat terraform-outputs.json | jq -r '.cluster_name.value')
        aws eks update-kubeconfig --region us-east-1 --name $CLUSTER_NAME
    
    - name: Health Check
      run: |
        echo "Checking service health..."
        kubectl get pods -n quickbite
        kubectl get services -n quickbite
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=api-gateway -n quickbite --timeout=300s
        kubectl wait --for=condition=ready pod -l app=auth-service -n quickbite --timeout=300s
    
    - name: Run Smoke Tests
      run: |
        # Get API Gateway endpoint
        API_ENDPOINT=$(kubectl get service api-gateway-service -n quickbite -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Run basic health checks
        curl -f http://$API_ENDPOINT/health || exit 1
        curl -f http://$API_ENDPOINT/api/v1/auth/health || exit 1
    
    - name: Performance Tests
      run: |
        # Run load tests with k6
        docker run --rm -i grafana/k6:latest run - < tests/load-test.js

  # ============================================
  # POST-DEPLOYMENT
  # ============================================
  
  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [verify-deployment]
    if: always() && (needs.verify-deployment.result == 'success')
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Update Deployment Status
      uses: deliverybot/deployment-status@master
      with:
        state: success
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Notify Slack
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: deployments
        SLACK_COLOR: ${{ job.status }}
        SLACK_MESSAGE: |
          🚀 QuickBite Platform deployed successfully!
          
          Environment: ${{ github.event.inputs.deployment_target || 'staging' }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
          
          Services deployed:
          ✅ API Gateway
          ✅ Auth Service  
          ✅ Catalog Service
          ✅ Order Service
          ✅ Payment Service
          ✅ Delivery Service
          ✅ Notification Service
        SLACK_TITLE: Deployment Notification
        SLACK_USERNAME: GitHub Actions
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: QuickBite Platform v${{ github.run_number }}
        body: |
          ## 🚀 QuickBite Platform Release v${{ github.run_number }}
          
          ### Changes in this release:
          - Enhanced microservices architecture
          - Improved mobile applications
          - Advanced monitoring and observability
          - Security enhancements
          
          ### Deployment Information:
          - **Environment:** Production
          - **Commit SHA:** ${{ github.sha }}
          - **Deployment Date:** ${{ steps.date.outputs.date }}
          
          ### Services Updated:
          - API Gateway
          - Authentication Service
          - Catalog Service
          - Order Management Service
          - Payment Processing Service
          - Delivery Management Service
          - Notification Service
          
          For technical support, please contact the DevOps team.
        draft: false
        prerelease: false

  # ============================================
  # CLEANUP
  # ============================================
  
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    if: always()
    needs: [post-deployment]
    
    steps:
    - name: Clean up artifacts
      run: |
        echo "Cleaning up temporary resources..."
        # Add cleanup logic here
    
    - name: Prune old Docker images
      run: |
        echo "Pruning old container images..."
        # Add image cleanup logic here