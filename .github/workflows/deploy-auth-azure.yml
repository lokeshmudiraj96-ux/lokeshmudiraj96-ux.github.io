name: Deploy Auth Service to Azure Web App (Container)

on:
  push:
    branches: [ "main" ]
    paths:
      - 'quickbite-backend/auth-service/**'
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}        # e.g., quickbite-auth-web
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}  # e.g., quickbite-rg
  AZURE_ACR_NAME: ${{ secrets.AZURE_ACR_NAME }}              # e.g., quickbiteacr (no domain)
  AZURE_REGION: ${{ secrets.AZURE_REGION }}                  # e.g., eastus
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  REDIS_URL: ${{ secrets.REDIS_URL }}
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # Service principal JSON

      - name: Get ACR credentials
        id: acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show -n ${{ env.AZURE_ACR_NAME }} --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show -n ${{ env.AZURE_ACR_NAME }} --query "passwords[0].value" -o tsv)
          echo "::add-mask::$ACR_PASSWORD"
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT
      
      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AZURE_ACR_NAME }}.azurecr.io
          username: ${{ steps.acr-creds.outputs.username }}
          password: ${{ steps.acr-creds.outputs.password }}

      - name: Build, tag, and push image to ACR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ACR_REGISTRY=${{ env.AZURE_ACR_NAME }}.azurecr.io
          IMAGE_NAME=$ACR_REGISTRY/quickbite-auth:${IMAGE_TAG}
          docker build -t $IMAGE_NAME ./quickbite-backend/auth-service
          docker push $IMAGE_NAME
          echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Configure Azure Web App to use container and settings
        uses: azure/cli@v2
        with:
          inlineScript: |
            ACR_REGISTRY=${{ env.AZURE_ACR_NAME }}.azurecr.io
            IMAGE=${ACR_REGISTRY}/quickbite-auth:${{ github.sha }}
            # Ensure app exists (if not, create Linux plan + webapp)
            if ! az webapp show -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AZURE_WEBAPP_NAME }} >/dev/null 2>&1; then
              PLAN=${{ env.AZURE_WEBAPP_NAME }}-plan
              az appservice plan create -g ${{ env.AZURE_RESOURCE_GROUP }} -n $PLAN --is-linux --sku F1 --location ${{ env.AZURE_REGION }}
              az webapp create -g ${{ env.AZURE_RESOURCE_GROUP }} -p $PLAN -n ${{ env.AZURE_WEBAPP_NAME }} --runtime "NODE|18-lts" --deployment-container-image-name $IMAGE
            fi
            # Configure container from ACR
            az webapp config container set \
              -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AZURE_WEBAPP_NAME }} \
              --docker-custom-image-name $IMAGE \
              --docker-registry-server-url https://${ACR_REGISTRY}
            # App settings (env vars), include WEBSITES_PORT for custom port
            az webapp config appsettings set -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AZURE_WEBAPP_NAME }} --settings \
              NODE_ENV=production \
              PORT=3001 \
              WEBSITES_PORT=3001 \
              JWT_SECRET=${{ env.JWT_SECRET }} \
              DATABASE_URL='${{ env.DATABASE_URL }}' \
              REDIS_URL='${{ env.REDIS_URL }}' \
              FRONTEND_URL='${{ env.FRONTEND_URL }}'

      - name: Restart app
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp restart -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AZURE_WEBAPP_NAME }}

      - name: Show app URL
        uses: azure/cli@v2
        with:
          inlineScript: |
            URL=$(az webapp show -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AZURE_WEBAPP_NAME }} --query defaultHostName -o tsv)
            echo "Auth service health: https://$URL/health"
